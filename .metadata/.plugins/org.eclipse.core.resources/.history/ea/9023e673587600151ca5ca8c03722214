package patterns.composite;

import java.util.LinkedList;
import java.util.List;

public class GroupFigure extends Figure {
	private String name;
	private List<Figure> figures = new LinkedList<Figure>();

	public GroupFigure(String name, Figure... figures) {
		this.name = name;
		for (Figure f : figures) {
			addFigure(f);
		}
	}

	public void addFigure(Figure f) {
		if(contained) throw new IllegalStateException();
		if(f.contained) throw new IllegalArgumentException())
		figures.add(f);
	}

	public void draw(String prefix) {
		System.out.println(prefix + name);
		for (Figure f : figures) {
			f.draw(prefix + ">>");
		}
	}
	
	private boolean contained(Figure g1, GroupFigure g2){
		if (g1==g2){
			return true;
			
		}else if(g1 instanceof GroupFigure){
			for(Figure f: ((GroupFigure)g1).figures){
				
			}
		}
		return false;
	}
	
}
